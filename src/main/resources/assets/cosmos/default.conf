####################################################################
##                   Cosmos configuration file                    ##
##                   Version 1.2.0                                ##
####################################################################

perworld {
    # 'true' or 'false". If 'true', players will have separated advancement trees on each world or group (see advancements-groups).
    # Otherwise, the advancement tree is shared between worlds.
	advancements=false
	# Worlds from the same group will share same advancement tree.
    # Advancements groups need per-world advancements to be enabled.
	# Technically, worlds from same group will store the same advancement tree. If you decide to split the
	# group afterwards, worlds will have separated advancement trees, completed at the same level.
	# One world cannot be alone or belong to different groups. Unspecified worlds will have their own advancements tree.
	# Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	advancements-groups=[]
	# 'true' or 'false". If 'true', when activating this feature, player's advancements of directory 'advancements'
	# will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
	# Data will be saved to your main world or all worlds of main world's group (see advancements-groups).
	advancements-persist-on-activation=true
	# 'true' or 'false". If 'true', players will only see messages from players on the same world or group (see chats-groups).
	# Otherwise, there will be a single message channel on the whole server.
	chats=false
    # Worlds from the same group will share the same message channel.
    # Chats groups need per-world chats to be enabled.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own message channel.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	chats-groups=[]
	# 'true' or 'false". If 'true', players with required permissions will be able to enable or disable
	# command blocks on a specific world, using the allow command blocks command of properties module.
	# Otherwise, command blocks activation will be governed by server.properties file on the whole server.
	commandblocks=false
    # Worlds from the same group will have the same state for command blocks.
    # Command blocks groups need per-world command blocks to be enabled.
    # Allowing or disabling command blocks to one world will affect all worlds of the group.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own state for command blocks.
    # Example: [ [creative, creative_nether] ]
	commandblocks-groups=[]
	# 'true' or 'false". If 'true', players will have separated ender chests on each world or group (see enderchests-groups).
	# Otherwise, the ender chest is shared between worlds.
    enderchests=false
    # 'true' or 'false". If 'true', when activating this feature, player's ender chest of directory 'playerdata'
    # will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
    # Data will be saved to your main world or all worlds of main world's group (see enderchests-groups).
    enderchests-persist-on-activation=true
    # Worlds from the same group will share same ender chest.
    # Ender chests groups need per-world ender chests to be enabled.
    # Technically, worlds from same group will store the same ender chest. If you decide to split the
    # group afterwards, worlds will have separated ender chests, with the same content.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own ender chest.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
    enderchests-groups=[]
	# 'true' or 'false". If 'true', players will have separated experience bars on each world or group (see experiences-groups).
	# Otherwise, the experience bar is shared between worlds.
	experiences=false
    # 'true' or 'false". If 'true', when activating this feature, player's experience bar of directory 'playerdata'
    # will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
    # Data will be saved to your main world or all worlds of main world's group (see experiences-groups).
	experiences-persist-on-activation=true
    # Worlds from the same group will share same experience bar.
    # Experiences groups need per-world experiences to be enabled.
    # Technically, worlds from same group will store the same experience bar. If you decide to split the
    # group afterwards, worlds will have separated experience bars, completed at the same level.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own experience bar.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	experiences-groups=[]
	# 'true' or 'false". If 'true', players game modes will match the defined game mode of the world they
	# are located in . Players with required permissions will be able to modify the world game mode using
	# the game mode command of properties modules.
	# Otherwise, game mode affectation will be governed by server.properties file on the whole server.
	gamemodes=false
    # Worlds from the same group will apply the same game mode.
    # Game modes groups need per-world game modes to be enabled.
    # Setting game mode to one world will affect all worlds of the group.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own state for game mode.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	gamemodes-groups=[]
	# 'true' or 'false". If 'true', players will have separated health bars on each world or group (see healths-groups).
    # Otherwise, the health bar is shared between worlds.
	healths=false
    # 'true' or 'false". If 'true', when activating this feature, player's health bar of directory 'playerdata'
    # will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
    # Data will be saved to your main world or all worlds of main world's group (see healths-groups),
	healths-persist-on-activation=true
    # Worlds from the same group will share same health bar.
    # Health groups need per-world healths to be enabled.
    # Technically, worlds from same group will store the same health bar. If you decide to split the
    # group afterwards, worlds will have separated health bars, completed at the same level.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own health bar.
    # Example: [ [world, DIM-1, DIM1] ]
	healths-groups=[]
	# 'true' or 'false". If 'true', players will have separated hunger bars on each world or group (see hungers-groups).
    # Otherwise, the hunger bar is shared between worlds.
	hungers=false
    # 'true' or 'false". If 'true', when activating this feature, player's hunger bar of directory 'playerdata'
    # will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
    # Data will be saved to your main world or all worlds of main world's group (see hungers-groups).
	hungers-persist-on-activation=true
    # Worlds from the same group will share same hunger bar.
    # Hungers groups need per-world hungers to be enabled.
    # Technically, worlds from same group will store the same hunger bar. If you decide to split the
    # group afterwards, worlds will have separated hunger bars, completed at the same level.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own hunger bar.
    # Example: [ [world, DIM-1, DIM1] ]
	hungers-groups=[]
	# 'true' or 'false". If 'true', players will have separated inventories on each world or group (see inventories-groups).
	# Otherwise, the inventory is shared between worlds.
	inventories=false
    # 'true' or 'false". If 'true', when activating this feature, player's inventory of directory 'playerdata'
    # will be copied in the Cosmos system, but only for players who have no Cosmos data on this feature yet.
    # Data will be saved to your main world or all worlds of main world's group (see inventories-groups).
	inventories-persist-on-activation=true
    # Worlds from the same group will share same inventory.
    # Inventories groups need per-world inventories to be enabled.
    # Technically, worlds from same group will store the same inventory. If you decide to split the
    # group afterwards, worlds will have separated inventories, with the same content.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own inventory.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	inventories-groups=[]
	# 'true' or 'false". If 'true', each world will have its own scoreboard.
	# Otherwise, there will be a single scoreboard on the whole server.
    # Players with required permissions will be able to use the enhanced scoreboard commands
    # replicated from the vanilla implementation but with additional possibilities, like colors, json parsing, and more.
    #
    # Check out the Wiki for more information:
    # https://github.com/thibaulthenry/cosmos/wiki/Commands#scoreboard-objectives-module
    #
    # Last but not least, if 'true', vanilla scoreboard commands are handled by the Cosmos scoreboard implementation,
    # even if a command block send them.
    # It means that you can import on your server custom maps which would use vanilla scoreboard commands without
    # polluting the scoreboard of other worlds.
    # Thus, you can also import two copies of the same maps without having any objective or score conflicts, since
    # scoreboards are encapsulated within their own world.
	scoreboards=false
    # Worlds from the same group will share same scoreboard.
    # Scoreboards groups need per-world scoreboards to be enabled.
    # Technically, worlds from same group will store the same scoreboard. If you decide to split the
    # group afterwards, worlds will have separated scoreboards, with the same content.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own scoreboard.
    # Example: [ [world, DIM-1, DIM1], [games, games_end] ]
	scoreboards-groups=[]
	# 'true' or 'false". If 'true', players will only appear on the tab list of the world they are located in.
	# Otherwise, there will be a single tab list on the whole server.
	tablists=false
    # Worlds from the same group will share the same tab list.
    # Tab lists groups need per-world tab lists to be enabled.
    # One world cannot be alone or belong to different groups. Unspecified worlds will have their own tab list.
    # Example: [ [world, DIM-1, DIM1], [creative, creative_nether] ]
	tablists-groups=[]
}

time {
	# 'true' or 'false". If 'true', players with required permissions will be able to use real time command.
	# Otherwise, the command is totally disabled.
	realtime=true
	# 'true' or 'false". If 'true',  sky position will be updated 24000 times a day (24 hours) on real time worlds.
	# Otherwise, sky position is updated every minute (1440 times a day).
	realtimesmoothupdate=true
	# List of the worlds saved in config and applying real time.
	# It means that real time will remain applied on those worlds on server restarts.
    # Players with required permissions will be able to enable or disable real time on a
    # specific world using the real time command of time module, with the --save-config
    # flag to add the world uuid in the list below.
	realtimeworlds=[]
    # 'true' or 'false". If 'true', players with required permissions will be able to use ignore players sleeping command.
    # Otherwise, the command is totally disabled.
	ignoreplayerssleeping=true
    # List of the worlds saved in config and ignoring players sleeping.
    # It means that players sleeping will remain ignored on those worlds on server restarts.
    # Players with required permissions will be able to enable or disable player sleep ignorance on a
    # specific world using the ignore players sleeping command of time module, with the --save-config
    # flag to add the world uuid in the list below.
	ignoreplayerssleepingworlds=[]
}
